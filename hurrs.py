#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#    Jul 25, 2019 05:17:07 PM EDT  platform: Windows NT



import numpy as np
import matplotlib.pyplot as plt

#turn off active plot 
import matplotlib
matplotlib.use('Agg')


from scipy import stats
from functools import partial
from PIL import ImageTk, Image




global filename1
filename1="tornadosapril1952to2014nc.txt"

global filename2
filename2="flhurricanes1900-2018.txt"

def createCanvasImage(F, C):
    # Load the image file
   im = Image.open(F) #open the appropriate file image to display
   # Put the image into a canvas compatible class, and stick in an
   # arbitrary variable to the garbage collector doesn't destroy it
   C.image = ImageTk.PhotoImage(im)
   # Add the image to the canvas, and set the anchor to the top left / north west corner
   C.create_image(0, 0, image=C.image, anchor='nw')


def readxy(data): #general function to strip numbers out of a text file line by line
    results=[]
    count=0
    for line in data:
        nextline=[]
        cells=line.strip().split(" ") #split data by spaces
        for cell in cells:
            try:
                value=int(cell.strip())#convert to int
                count=count+1 #counts number of lines read in
            except: #if this fails use original
                value=cell
            nextline.append(value)
        results.append(nextline)
    return results, count

def NCtornados(S, cnv):
    try:
      file=open(filename1,"r")
    except:
      tk.messagebox.showinfo(title="ERROR", message="MISSING FILE tornadosapril1952to2014nc.txt")
    else:
      data=file.readlines() #read lines in block
      file.close()
      data, n =readxy(data) #process data into a list
      #print(n)
      del(data[n]) #removes the EOF from the file
      #print(data)
      tornados=np.asarray(data,int)
      #np.set_printoptions(threshold=np.inf)
      #print(tornados)
      mean=np.mean(tornados)
      median=np.median(tornados)
      mode=stats.mode(tornados)
      variance=np.var(tornados)
      standard=np.std(tornados)
      S.delete(1.0, tk.END)
      S.insert(tk.END, "Mean Tornados:")
      S.insert(tk.CURRENT, mean)
      S.insert(tk.END, "\nMedian tornados: ")
      S.insert(tk.CURRENT, median)
      S.insert(tk.END, "\nMode tornados: ")
      S.insert(tk.CURRENT, mode[0])
      S.insert(tk.END, "\nTornado variance: ")
      S.insert(tk.CURRENT, variance)
      S.insert(tk.END,  "\nTornado standard deviation: ")
      S.insert(tk.CURRENT, standard)
      T=[]
      for i in range(1952, n+1952):
         T.append(i)
      #print(T)
      flatlist = [item for sublist in data for item in sublist] #makes data into a single list for plotting
      #print(flatlist)
      plt.figure(figsize=(11,5.5))
      plt.title("Plot of April tornados for NC since 1952")
      plt.xlabel("Year since 1952")
      plt.ylabel("Total tornados")
      
      plt.bar(T, flatlist)
      plt.xticks(rotation="90")
      plt.grid(True)
      fname="NCtornados.jpg"
      plt.savefig(fname, format="jpg", bbox_inches="tight")      
      createCanvasImage(fname, cnv)
      
def FLHurricanes(S, cnv):
    try:
      file=open(filename2, "r")
    except:
      tk.messagebox.showinfo(title="ERROR", message="MISSING FILE flhurricanes1900-2018.txt")
    else:
      year=[]
      strikes=[]
      for line in file.readlines():
          fields = line.split()
          year.append(fields[0])
          strikes.append(fields[1])
      file.close()
      year=year[3:]  #these slice off text at top of datafile
      strikes=strikes[3:]
      strikes=[int(i) for i in strikes]
      #print(year)
     # print(type(strikes[0]))
      #print(strikes)
      hurrs=np.array(strikes) #convert to numpy array for statistical calculations
      #np.set_printoptions(threshold=np.inf)
      #print(tornados)
      mean=np.mean(hurrs)
      median=np.median(hurrs)
      mode=stats.mode(hurrs)
      variance=np.var(hurrs)
      standard=np.std(hurrs)
      S.delete(1.0, tk.END)
      S.insert(tk.END, "Mean FL Hurricanes since 1900:")
      S.insert(tk.CURRENT, mean)
      S.insert(tk.END, "\nMedian FL Hurricanes since 1900: ")
      S.insert(tk.CURRENT, median)
      S.insert(tk.END, "\nMode FL Hurricanes since 1900: ")
      S.insert(tk.CURRENT, mode[0])
      S.insert(tk.END, "\nMean Hurricane Variance since 1900: ")
      S.insert(tk.CURRENT, variance)
      S.insert(tk.END,  "\nMean Hurricane Std Deviation since 1900: ")
      S.insert(tk.CURRENT, standard)
      T=[]
      for i in range(1900, len(year)+1900):
         T.append(i)
      #print(T)
      #flatlist = [item for sublist in data for item in sublist] #makes data into a single list for plotting
      #print(flatlist)
      plt.figure(figsize=(11,5.5))
      plt.title("Plot of Florida Hurricane Landfalls since 1900")
      plt.xlabel("Year")
      plt.ylabel("Total Florida Landfalls")
      
      plt.bar(T, strikes, width=0.5, color="red")
      plt.xticks(np.arange(1900, len(year) + 1900,5), rotation="90")
      plt.grid(True)
      fname="FLhurricanes.jpg"
      plt.savefig(fname, format="jpg", bbox_inches="tight")
      createCanvasImage(fname, cnv)


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import hurrs_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    hurrs_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    hurrs_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1077x839+436+150")
        top.title("Main Window")
        top.configure(background="#54f4ff")

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.046, rely=0.298, relheight=0.659
                , relwidth=0.876)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
        self.Canvas1.configure(width=943)

        self.Text1 = tk.Text(top)
        self.Text1.place(relx=0.046, rely=0.048, relheight=0.231, relwidth=0.57)
        self.Text1.configure(background="#000000")
        self.Text1.configure(font=("TimesNewRoman",18))
        self.Text1.configure(foreground="#ffffff")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(width=614)
        self.Text1.configure(wrap="word")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.102, rely=0.012, height=31, width=104)
        self.Label1.configure(background="#000000")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(text='''Statistics''')
        self.Label1.configure(width=104)

        self.Button1 = tk.Button(top, command=partial(NCtornados, self.Text1, self.Canvas1))
        self.Button1.place(relx=0.724, rely=0.072, height=54, width=217)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''NC April Tornadoes since 1952''')
        self.Button1.configure(width=217)

        self.Button1_1 = tk.Button(top, command=partial(FLHurricanes, self.Text1, self.Canvas1))
        self.Button1_1.place(relx=0.724, rely=0.179, height=54, width=217)
        self.Button1_1.configure(activebackground="#ececec")
        self.Button1_1.configure(activeforeground="#000000")
        self.Button1_1.configure(background="#d9d9d9")
        self.Button1_1.configure(disabledforeground="#a3a3a3")
        self.Button1_1.configure(foreground="#000000")
        self.Button1_1.configure(highlightbackground="#d9d9d9")
        self.Button1_1.configure(highlightcolor="black")
        self.Button1_1.configure(pady="0")
        self.Button1_1.configure(text='''Florida Hurricanes since 1900''')
        self.Button1_1.configure(width=217)

if __name__ == '__main__':
    vp_start_gui()





