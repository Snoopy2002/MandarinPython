#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#    Jul 30, 2019 10:01:56 PM EDT  platform: Windows NT




import projectiletk_support #loads import modules


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    projectiletk_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    projectiletk_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None
    
    
def frange(start, final, intvl): #sets up the range (x axis) in increments of interval units
    numbers=[]
    while start < final:
       numbers.append(start)
       start=start+intvl
    return numbers
    
def createCanvasImage(F, C):
    # Load the image file
   im = Image.open(F) #open the appropriate file image to display
   # Put the image into a canvas compatible class, and stick in an
   # arbitrary variable to the garbage collector doesn't destroy it
   C.image = ImageTk.PhotoImage(im)
   # Add the image to the canvas, and set the anchor to the top left / north west corner
   C.create_image(0, 0, image=C.image, anchor='nw')
    

    
def draw_trajectory(C1, v0, y0, theta, tflight): #draws the projectile position graph
  
    intervals=frange(0, tflight, 0.001)
    x=[]
    y=[]
    for t in intervals: 
        x.append(v0*math.cos(theta)*t)
        y.append(y0+(v0*math.sin(theta)*t) - (0.5*g*t*t))

    plt.figure(figsize=(9.35,2.8))
    plt.plot(x,y, color='blue')
    plt.xlabel('x-coord in m')
    plt.ylabel('y-coord in m')
    plt.title('Projectile Motion Range')
    plt.grid(True)
    fname="trajectory.jpg"
    plt.savefig(fname, format="jpg", bbox_inches="tight")
    createCanvasImage(fname, C1)
    plt.close()
    return
    
def draw_potential(C2, massobj, tflight, y0, v0, theta): #draws the projectile potential energy graph
    
    intervals=frange(0, tflight, 0.1)
    a=[]
    b=[]
    for t in intervals:
        a.append(t)
        h=y0+(v0*math.sin(theta)*t) - (0.5*g*t*t)
        b.append(massobj*g*h)
    plt.figure(figsize=(9.2,2.8))
    plt.plot(a,b, color='green')
    plt.xlabel('time in seconds')
    plt.ylabel('E in Joules')
    plt.title('Potential Energy of a Projectile in Motion')   
    plt.grid(True)
    fname="potenergy.jpg"
    plt.savefig(fname, format="jpg", bbox_inches="tight")
    createCanvasImage(fname, C2)
    plt.close()
    return


def draw_kinetic(C3, massobj, tflight, y0, v0, theta): #draws the projectile kinetic energy graph

    intervals=frange(0, tflight, 0.1)
    a=[]
    b=[]
    for t in intervals:
       a.append(t)
       vx=v0*math.cos(theta) #x component of velocity
       vy=v0*math.sin(theta)-g*t #y-component of velocity
       KE=0.5*massobj*( vx*vx + vy*vy) #kinetic energy
       b.append(KE)
    plt.figure(figsize=(9.4,2.8))
    plt.plot(a,b, color='red')
    plt.xlabel('time in seconds')
    plt.ylabel('E in Joules')
    plt.title('Kinetic Energy of a Projectile in Motion')  
    plt.grid(True)
    fname="kenergy.jpg"
    plt.savefig(fname, format="jpg", bbox_inches="tight")
    createCanvasImage(fname, C3)
    plt.close()
    return

    
def process_data(e1, e2, e3, e4, c1, c2, c3, t1):
    try:
      mass=float(e1.get())
      theta=float(e2.get())
      theta=math.radians(theta)
      v0=float(e3.get())
      y0=float(e4.get())
      tmax=v0*math.sin(theta)/g #time of maximum height
      ymax=y0+(v0*math.sin(theta)*tmax)-(0.5*g*tmax*tmax) #maximum height reached in meters
      tflight=tmax+math.sqrt((2*ymax)/g)
      R=(v0*math.cos(theta)*tflight) #range equation
    
      #theta=math.degrees(theta)   
      t1.delete(1.0, tk.END)
      t1.insert(tk.END, "Total flight time in seconds is:")
      t1.insert(tk.CURRENT, tflight)
      t1.insert(tk.END, "\nTotal Distance traveled in m is: ")
      t1.insert(tk.CURRENT, R)
      t1.insert(tk.END, "\nMaximum height in m is: ")
      t1.insert(tk.CURRENT, ymax)
      t1.insert(tk.END, "\nLaunch angle in radians: ")
      t1.insert(tk.CURRENT, theta)
    except:
      tk.messagebox.showinfo(title="ERROR", message="Unable to create plots")
    else:
      draw_trajectory(c1,v0, y0, theta, tflight)
      draw_potential(c2, mass, tflight, y0, v0, theta)
      draw_kinetic(c3, mass, tflight, y0, v0, theta)


class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family Arial -size 12 -weight normal -slant roman "  \
            "-underline 0 -overstrike 0"

        top.geometry("1550x1061+304+36")
        top.title("Projectile Motion Program")
        top.configure(background="#000000")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.181, rely=0.009,height=50, relwidth=0.164)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.097, rely=0.019, height=31, width=124)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Enter Mass in Kg''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.032, rely=0.085, height=31, width=224)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Enter Projection Angle in Degrees''')

        self.Entry2 = tk.Entry(top)
        self.Entry2.place(relx=0.181, rely=0.075,height=50, relwidth=0.164)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(selectforeground="black")

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.058, rely=0.16, height=31, width=185)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Enter Initial Velocity V0 in m/sec''')

        self.Entry3 = tk.Entry(top)
        self.Entry3.place(relx=0.181, rely=0.151,height=50, relwidth=0.164)
        self.Entry3.configure(background="white")
        self.Entry3.configure(disabledforeground="#a3a3a3")
        self.Entry3.configure(font="TkFixedFont")
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(highlightbackground="#d9d9d9")
        self.Entry3.configure(highlightcolor="black")
        self.Entry3.configure(insertbackground="black")
        self.Entry3.configure(selectbackground="#c4c4c4")
        self.Entry3.configure(selectforeground="black")

        self.Entry4 = tk.Entry(top)
        self.Entry4.place(relx=0.181, rely=0.226,height=50, relwidth=0.164)
        self.Entry4.configure(background="white")
        self.Entry4.configure(disabledforeground="#a3a3a3")
        self.Entry4.configure(font="TkFixedFont")
        self.Entry4.configure(foreground="#000000")
        self.Entry4.configure(highlightbackground="#d9d9d9")
        self.Entry4.configure(highlightcolor="black")
        self.Entry4.configure(insertbackground="black")
        self.Entry4.configure(selectbackground="#c4c4c4")
        self.Entry4.configure(selectforeground="black")

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.077, rely=0.236, height=31, width=154)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Enter Initial Height in m''')

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.413, rely=0.009, relheight=0.295
                , relwidth=0.531)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="#d9d9d9")
        self.Canvas1.configure(highlightcolor="black")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
        self.Canvas1.configure(width=823)

        self.Canvas1_1 = tk.Canvas(top)
        self.Canvas1_1.place(relx=0.413, rely=0.32, relheight=0.295
                , relwidth=0.531)
        self.Canvas1_1.configure(background="#d9d9d9")
        self.Canvas1_1.configure(borderwidth="2")
        self.Canvas1_1.configure(highlightbackground="#d9d9d9")
        self.Canvas1_1.configure(highlightcolor="black")
        self.Canvas1_1.configure(insertbackground="black")
        self.Canvas1_1.configure(relief="ridge")
        self.Canvas1_1.configure(selectbackground="#c4c4c4")
        self.Canvas1_1.configure(selectforeground="black")
        self.Canvas1_1.configure(width=823)

        self.Canvas1_2 = tk.Canvas(top)
        self.Canvas1_2.place(relx=0.413, rely=0.622, relheight=0.295
                , relwidth=0.531)
        self.Canvas1_2.configure(background="#d9d9d9")
        self.Canvas1_2.configure(borderwidth="2")
        self.Canvas1_2.configure(highlightbackground="#d9d9d9")
        self.Canvas1_2.configure(highlightcolor="black")
        self.Canvas1_2.configure(insertbackground="black")
        self.Canvas1_2.configure(relief="ridge")
        self.Canvas1_2.configure(selectbackground="#c4c4c4")
        self.Canvas1_2.configure(selectforeground="black")
        self.Canvas1_2.configure(width=823)

        self.img=tk.PhotoImage(file="equations.gif")
        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.052, rely=0.5, height=401, width=454)
        self.Label5.image = self.img # <== this is were we anchor the img object
        self.Label5.configure(image=self.img)
        self.Label5.configure(text='''Label''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Text1 = tk.Text(top)
        self.Text1.place(relx=0.013, rely=0.358, relheight=0.136, relwidth=0.37)
        self.Text1.configure(background="#000000")
        self.Text1.configure(font=("TimesNewRoman",18))        
        self.Text1.configure(foreground="#b0fc2d")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="#c4c4c4")
        self.Text1.configure(selectforeground="black")
        self.Text1.configure(width=574)
        self.Text1.configure(wrap="word")
        
        
        self.Button1 = tk.Button(top, command=partial(process_data, self.Entry1, self.Entry2, self.Entry3, self.Entry4, self.Canvas1, self.Canvas1_1, self.Canvas1_2, self.Text1))
        self.Button1.place(relx=0.155, rely=0.297, height=54, width=147)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d8181e")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font=font9)
        self.Button1.configure(foreground="#ffffff")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Run Simulation''')
        
    
        
        

if __name__ == '__main__':
    vp_start_gui()





